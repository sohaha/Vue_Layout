<script>
import Item from './Item';
import Panes from './Panes';
// import Vue from 'vue';
import DemoInput from './DemoInput';
import Accordion from './Accordion';
// import { toSize } from './utils';

export default {
  name: 'IdeaLayout',
  components: { Panes, Item, DemoInput, Accordion },
  props: {
    layout: {
      type: Object,
      default: () => ({}),
    },
  },
  data: () => ({
    state: {
      bottom: 13,
      right: true,
      left: true,
    },
    history: {},
  }),
  computed: {
    left() {
      return this.layout['left'] || [];
    },
    right() {
      const r = this.layout['right'] || [];
      if (r.length === 0 && this.$refs.right) {
        console.log('删除', this.$refs.right);
        // this.$refs.right && this.$refs.right.onPaneRemove(this.$refs.right);
      }
      return r;
    },
  },
  watch: {},
  methods: {
    remove(key, index) {
      const layout = this.layout;
      layout[key].splice(index, 1);
      this.updateLayout(layout);
    },
    updateLayout(layout) {
      this.$emit('update:layout', layout);
    },
    add(key) {},
    toggle(key) {
      if (typeof this.state[key] !== 'number') {
        return;
      }
      if (this.history[key]) {
        this.state[key] = this.history[key];
        this.history[key] = 0;
        return;
      }
      this.history[key] = this.state[key];
      this.state[key] = 0;
      console.log(this.$refs.panes);
      this.$refs.panes.updatePaneComponents();
    },
  },
  render(h) {
    // const t = this;
    const createItem = name => {
      const child = [];
      switch (name) {
        case 'bottom':
          break;
        case 'content':
          child.push(
            h('panes', {}, [
              createItem('left'),
              createItem('centre'),
              createItem('right'),
            ])
          );
          break;
        default:
          if (this.layout[name] && this.layout[name].length > 0) {
            const itemChild = [];
            const keys = [];
            let itemParent = {};
            for (let index = 0; index < this.layout[name].length; index++) {
              const v = this.layout[name][index];
              let key = `${v.component}|${v.name || ''}`;
              if (keys.includes(key)) {
                console.warn(
                  `${v.name} is not the only unpredictable problem that can occur`
                );
                key = key + Number(new Date());
              }
              keys.push(key);
              const minSize = v.min || '22px';
              const AccordionItems = [{ name: '' }];
              const item = h('accordion', {
                class: { minSize },
                props: {
                  items: AccordionItems,
                },
              });
              // const item = h(
              //   'item',
              //   {
              //     key,
              //     props: {
              //       minSize: minSize,
              //     },
              //     class: {
              //       itme__open: v.open,
              //     },
              //   },
              //   [
              //     h(
              //       'div',
              //       {
              //         class: ['item-title'],
              //         on: {
              //           click() {
              //             const target = item.componentInstance;
              //             const state = !v.open;
              //             const pane = target.$parent.indexedPanes[target._uid];
              //             let size = target.lastSize;
              //             if (state) {
              //               size = toSize(target.$parent, minSize);
              //               target.lastSize = pane.size;
              //             }
              //             target.requestUpdate({
              //               target,
              //               size,
              //             });
              //             Vue.set(v, 'open', state);
              //           },
              //         },
              //       },
              //       [
              //         h('span', {
              //           class: {
              //             'itme--toggle': true,
              //             'itme--toggle__open': v.open,
              //           },
              //           on: {
              //             click(target) {},
              //           },
              //         }),
              //         v.name,
              //         h(
              //           'span',
              //           {
              //             class: ['itme__delete'],
              //             on: {
              //               click(target) {
              //                 target.stopPropagation();
              //                 t.remove(name, index);
              //               },
              //             },
              //           },
              //           ['X']
              //         ),
              //       ]
              //     ),
              //     h(v.component, { ...v.attr }),
              //   ]
              // );
              itemChild.push(item);
            }

            itemChild.push(
              h('item', {
                props: {
                  size: 0,
                  min: 0,
                },
              })
            );
            itemParent = h(
              'panes',
              {
                props: {
                  horizontal: true,
                  firstSplitter: true,
                },
              },
              itemChild
            );
            child.push(itemParent);
          } else {
            return '';
          }
      }

      return h(
        'item',
        {
          class: {
            [`item__${name}`]: true,
          },
        },
        child
      );
    };
    const layout = h(
      'panes',
      {
        ref: 'panes',
        style: {
          height: '500px',
          // width: '500px',
        },
        props: {
          horizontal: true,
          firstSplitter: true,
        },
      },
      [createItem('content'), createItem('bottom')]
    );
    return layout;
  },
};
</script>

<style lang="less">
.item-title {
  @text-color: rgb(107, 114, 128);
  background: #d8d4c4;
  font-size: 12px;
  padding: 2px;
  height: 22px;
  color: @text-color;
  position: relative;
  .itme--toggle {
    width: 18px;
    height: 18px;
    position: absolute;
    left: 10px;
    background-size: 15px;
    background-repeat: no-repeat;
    background-position: center;
    background-image: url('data:image/svg+xml;%20charset=utf8,%3Csvg%20viewBox=%220%200%201024%201024%22%20version=%221.1%22%20xmlns=%22http://www.w3.org/2000/svg%22%20width=%2220%22%20height=%2220%22%3E%3Cpath%20d=%22M96.196%20671.807l415.804-415.632%20415.803%20415.632-63.616%2063.445-352.209-352.017-352.102%20352.017z%22%20p-id=%221308%22%3E%3C/path%3E%3C/svg%3E');
    transform: rotate(180deg);
    &.itme--toggle__open {
      transform: rotate(90deg);
    }
  }
  .itme__delete {
    position: absolute;
    right: 10px;
    cursor: pointer;
    font-weight: bold;
    visibility: hidden;
    padding: 0 10px;
  }
  &:hover {
    .itme__delete {
      visibility: visible;
    }
  }
}
.splitpanes__pane.itme__open ~ .splitpanes__splitter {
  background: brown;
  display: none;
}
.splitpanes__splitter {
  position: relative;
}
.splitpanes--horizontal .splitpanes__splitter {
  min-height: 0;
}
.splitpanes--vertical .splitpanes__splitter {
  min-width: 0;
}
.splitpanes__splitter:hover {
  background: rgba(0, 0, 0, 0.05);
}
.splitpanes__splitter:before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  transition: opacity 0.4s;
  background-color: rgba(0, 0, 0, 0.05);
  opacity: 0;
  z-index: 1;
}
.splitpanes__splitter:hover:before {
  opacity: 1;
}
.splitpanes--vertical > .splitpanes__splitter:before {
  left: -2px;
  right: -2px;
  height: 100%;
}
.splitpanes--horizontal > .splitpanes__splitter:before {
  top: -2px;
  bottom: -2px;
  width: 100%;
}
</style>
